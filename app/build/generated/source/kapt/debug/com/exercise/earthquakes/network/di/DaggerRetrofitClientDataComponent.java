// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.exercise.earthquakes.network.di;

import com.exercise.earthquakes.network.EarthquakeService;
import com.exercise.earthquakes.network.clients.RetrofitClient;
import com.exercise.earthquakes.network.clients.RetrofitClient_MembersInjector;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import io.github.adamshurwitz.retrorecycler.dependencyinjection.RetrofitClientDataModule;
import io.github.adamshurwitz.retrorecycler.dependencyinjection.RetrofitClientDataModule_ProvideHttpClientFactory;
import io.github.adamshurwitz.retrorecycler.dependencyinjection.RetrofitClientDataModule_ProvideRetrofitFactory;
import io.github.adamshurwitz.retrorecycler.dependencyinjection.RetrofitClientDataModule_ProvideServiceFactory;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerRetrofitClientDataComponent implements RetrofitClientDataComponent {
  private Provider<OkHttpClient> provideHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<EarthquakeService> provideServiceProvider;

  private MembersInjector<RetrofitClient> retrofitClientMembersInjector;

  private DaggerRetrofitClientDataComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static RetrofitClientDataComponent create() {
    return builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideHttpClientProvider =
        DoubleCheck.provider(
            RetrofitClientDataModule_ProvideHttpClientFactory.create(
                builder.retrofitClientDataModule));

    this.provideRetrofitProvider =
        DoubleCheck.provider(
            RetrofitClientDataModule_ProvideRetrofitFactory.create(
                builder.retrofitClientDataModule, provideHttpClientProvider));

    this.provideServiceProvider =
        RetrofitClientDataModule_ProvideServiceFactory.create(
            builder.retrofitClientDataModule, provideRetrofitProvider);

    this.retrofitClientMembersInjector =
        RetrofitClient_MembersInjector.create(provideServiceProvider);
  }

  @Override
  public void inject(RetrofitClient arg0) {
    retrofitClientMembersInjector.injectMembers(arg0);
  }

  public static final class Builder {
    private RetrofitClientDataModule retrofitClientDataModule;

    private Builder() {}

    public RetrofitClientDataComponent build() {
      if (retrofitClientDataModule == null) {
        this.retrofitClientDataModule = new RetrofitClientDataModule();
      }
      return new DaggerRetrofitClientDataComponent(this);
    }

    public Builder retrofitClientDataModule(RetrofitClientDataModule retrofitClientDataModule) {
      this.retrofitClientDataModule = Preconditions.checkNotNull(retrofitClientDataModule);
      return this;
    }
  }
}
